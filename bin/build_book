#!/usr/bin/env ruby

# build_book [-t <TITLE>]
 
# Assumes scenes in scene_dir are ordered.
# If TITLE given writes book/<TITLE>, otherwise TITLE is 'Book'.

# TODO:
#   Add other bits; dedication, afterward, author bio, etc.

require 'fileutils'
require 'optparse'

book_dir    = 'book'
chapter_dir = 'chapters'
extra_dir   = 'extras'
scene_dir   = 'scenes'
pre_extras  = ['dedication', 'notes']
post_extras = ['afterward', 'author_bio']

options = Hash.new(0)
option_parser = OptionParser.new do |opts|
  opts.on('-t', '--title TITLE', 'Title of the book') do |t|
    options[:title] = t
  end
  opts.on('-p', '--prologue', 'Book as a prologue') do 
    options[:prologue] = true
  end
end
option_parser.parse!

if options[:title] == 0
  book_name = 'Book'
else
  book_name = options[:title]
end

if File.directory?(book_dir)
  FileUtils.rm_rf(book_dir)
end
Dir.mkdir(book_dir)

if File.directory?(chapter_dir)
  FileUtils.rm_rf(chapter_dir)
end
Dir.mkdir(chapter_dir)

if File.directory?(scene_dir)
  scene_files = Dir.entries(scene_dir)
  scene_files.sort!
else
  puts("Need scenes.")
  exit
end

if options[:prologue] == true
  chapter_count = 0
else
  chapter_count = 1
end

book_file     = book_dir + '/' + book_name
header_space  = "\n\n"
scene_space   = "\n\n\n\n\n"

pre_extras.each { |f|
  extra_file_name = extra_dir + '/' + f + '.txt'
  if File.file? extra_file_name
    ex  = File.read(extra_file_name)
    File.open(book_file, "a+") { |f|
      f.write(ex)
      f.write(scene_space)
    }
  end
}
      
    

scene_files.each do |scene_file|
  if scene_file.end_with?('.txt')
    scene = File.read("#{scene_dir}/#{scene_file}")
    File.open("#{chapter_dir}/Chapter_#{chapter_count}", "w") { |file|
      file.write(scene)
      file.write(scene_space)
    }

    File.open(book_file, "a+") { |file|
      if chapter_count == 0
        file.write("Prologue\n")
      else
        file.write("Chapter #{chapter_count}\n")
      end
      file.write(header_space)
      file.write(scene)
      file.write(scene_space)
    }
    chapter_count += 1
  end
end


